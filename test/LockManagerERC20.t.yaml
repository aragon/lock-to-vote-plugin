LockManagerTest:
  - given: The contract is being deployed
    and:
      - when: Deploying with valid parameters and a non-zero underlying token
        then:
          - it: Should set the DAO address correctly
          - it: Should set the pluginMode correctly
          - it: Should set the token address correctly
          - it: Should set the underlying token address correctly
          - it: Should initialize the plugin address to address(0)
      - when: Deploying with a zero-address for the underlying token
        then:
          - it: Should set the underlying token address to address(0)

  - given: The plugin address has not been set yet
    and:
      - when: Calling setPluginAddress() with an address that does not support ILockToGovernBase
        then:
          - it: Should revert with InvalidPlugin
      - given: The pluginMode is Voting
        and:
          - when: Calling setPluginAddress() with a plugin that supports ILockToGovernBase but not ILockToVote
            then:
              - it: Should revert with InvalidPlugin
          - when: Calling setPluginAddress() with a valid Voting plugin
            then:
              - it: Should set the plugin address

  - given: The plugin address has already been set
    and:
      - when: Calling setPluginAddress() again
        then:
          - it: Should revert with SetPluginAddressForbidden

  - given: A user wants to lock tokens
    comment: The user has a non-zero token balance
    and:
      - when: The user has not approved the LockManager to spend any tokens
        comment: Allowance is 0
        and:
          - when: Calling lock()
            then:
              - it: Should revert with NoBalance
      - when: The user has approved the LockManager to spend tokens
        comment: Allowance is > 0
        and:
          - when: Calling lock()
            then:
              - it: Should transfer the full allowance amount from the user
              - it: Should increase the user's lockedBalances by the allowance amount
              - it: Should emit a BalanceLocked event with the correct user and amount
      - when: The user has approved the LockManager to spend more than the balance
        comment: Allowance is âˆž
        and:
          - when: Calling lock()
            then:
              - it: Should transfer the full balance from the user
              - it: Should increase the user's lockedBalances by the balance
              - it: Should emit a BalanceLocked event with the correct user and amount
      - when: The user tries to lock more than his balance
        and:
          - when: Calling lock()
            then:
              - it: Should revert

  - given: pluginMode is Voting
    and:
      - given: A plugin is set and a proposal is active
        and:
          - given: The user has no locked balance
            and:
              - when: Calling vote()
                then:
                  - it: Should revert with NoBalance
              - given: The user has no token allowance for the LockManager
                and:
                  - when: Calling lockAndVote()
                    then:
                      - it: Should revert with NoBalance
              - given: The user has a token allowance for the LockManager
                and:
                  - when: Calling lockAndVote()
                    then:
                      - it: Should first lock the tokens by transferring the full allowance
                      - it: Should then call vote() on the plugin with the new balance
          - given: The user has a locked balance
            and:
              - when: Calling vote() for the first time on a proposal
                then:
                  - it: Should call vote() on the plugin with the user's full locked balance
              - given: The user has already voted on the proposal with their current balance
                and:
                  - when: Calling vote() again with the same parameters
                    then:
                      - it: Should revert with VoteCastForbidden
              - given: The user locks more tokens
                and:
                  - when: Calling vote() again
                    then:
                      - it: Should call vote() on the plugin with the new, larger balance

  - given: A user wants to unlock tokens
    and:
      - given: The user has no locked balance
        and:
          - when: Calling unlock()
            then:
              - it: Should revert with NoBalance
      - given: The user has a locked balance
        and:
          - given: The user has no active votes on any open proposals
            and:
              - when: Calling unlock()
                then:
                  - it: Should succeed and transfer the locked balance back to the user
          - given: The user has votes on open proposals
            and:
              - when: Calling unlock()
                then:
                  - it: Should call clearVote() on the plugin for each active proposal
                  - it: Should transfer the locked balance back to the user
                  - it: Should set the user's lockedBalances to 0
                  - it: Should emit a BalanceUnlocked event
          - given: The user only has votes on proposals that are now closed or ended
            comment: The contract should garbage-collect the closed proposal during the check
            and:
              - when: Calling unlock()
                then:
                  - it: Should not attempt to clear votes for the closed proposal
                  - it: Should remove the closed proposal from knownProposalIds
                  - it: Should succeed and transfer the locked balance back to the user

  - given: The plugin has been set
    and:
      - given: The caller is not the registered plugin
        and:
          - when: Calling proposalCreated()
            then:
              - it: Should revert with InvalidPluginAddress
          - when: Calling proposalEnded()
            then:
              - it: Should revert with InvalidPluginAddress
      - given: The caller is the registered plugin
        and:
          - when: Calling proposalCreated() with a new proposal ID
            then:
              - it: Should add the proposal ID to knownProposalIds
          - given: A proposal ID is already known
            and:
              - when: Calling proposalCreated() with that same ID
                then:
                  - it: Should not change the set of known proposals
              - when: Calling proposalEnded() with that proposal ID
                then:
                  - it: Should remove the proposal ID from knownProposalIds
                  - it: Should emit a ProposalEnded event
          - when: Calling proposalEnded() with a non-existent proposal ID
            then:
              - it: Should do nothing

  - given: The contract is initialized
    and:
      - given: A plugin is set and a proposal exists
        and:
          - given: pluginMode is Voting
            and:
              - when: Calling canVote()
                then:
                  - it: Should proxy the call to the plugin's canVote() and return its result
      - given: The contract has several known proposal IDs
        and:
          - when: Calling knownProposalIdAt() with a valid index
            then:
              - it: Should return the correct proposal ID at that index
          - when: Calling knownProposalIdAt() with an out-of-bounds index
            then:
              - it: Should revert
