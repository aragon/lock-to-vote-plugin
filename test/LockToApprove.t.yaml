LockToApproveTest:
  # Contract lifecycle
  - when: deploying the contract
    then:
      - it: should disable the initializers
      - it: should initialize normally
  - given: a deployed contract
    then:
      - it: should refuse to initialize again
  - given: a new proxy
    and:
      - given: calling initialize
        and:
          - it: should set the DAO address
          - it: should define the approval settings
          - it: should define the target config
          - it: should define the plugin metadata
          - it: should define the lock manager

  # Settings
  - when: calling updateSettings
    and:
      - when: updateSettings without the permission
        then:
          - it: should revert
      - when: updateSettings with the permission
        then:
          - it: should update the values

  - when: calling supportsInterface
    then:
      - it: does not support the empty interface
      - it: supports IERC165Upgradeable
      - it: supports IMembership
      - it: supports ILockToApprove

  # Proposal lifecycle
  - given: Proposal not created
    and:
      - given: No proposal creation permission
        and:
          - when: Calling createProposal [no perm]
            then:
              - it: Should revert
      - given: Proposal creation permission granted
        and:
          - when: Calling createProposal [empty dates]
            then:
              - it: Should register the new proposal
              - it: Should assign a unique proposalId to it
              - it: Should register the given parameters
              - it: Should start immediately
              - it: Should end after proposalDuration
              - it: Should emit an event
              - it: Should call proposalCreated on the manager
          - when: Calling createProposal [explicit dates]
            then:
              - it: Should start at the given startDate
              - it: Should revert if endDate is before proposalDuration
              - it: Should end on the given endDate
              - it: Should call proposalCreated on the manager
              - it: Should emit an event
          - when: Calling createProposal with duplicate data
            then:
              - it: Should revert
              - it: Different data should produce different proposalId's
      - when: Calling the getters [not created]
        then:
          - it: getProposal should return empty values
          - it: isProposalOpen should return false
          - it: canApprove should return false
          - it: hasSucceeded should return false
          - it: canExecute should return false
      - when: Calling the rest of methods
        then:
          - it: Should revert, even with the required permissions

  - given: Proposal created
    and:
      - when: Calling getProposal
        then:
          - it: Should return the right values
      - when: Calling isProposalOpen
        then:
          - it: Should return true
      - when: Calling canApprove
        then:
          - it: Should return true when there is balance left to allocate
      - given: No lock manager permission
        then:
          - when: Calling approve
            then:
              - it: Reverts, regardless of the balance
          - when: Calling clearApproval
            then:
              - it: Reverts, regardless of the balance
      - given: Lock manager permission is granted
        then:
          - given: Proposal created unstarted
            then:
              - it: Calling approve should revert, with or without balance
          - given: Proposal created and started
            and:
              - when: Calling approve no new locked balance
                then:
                  - it: Should revert
              - when: Calling approve new locked balance
                then:
                  - it: Should increase the tally by the new amount
                  - it: Should emit an event
              - when: Calling clearApproval no approve balance
                then:
                  - it: Should do nothing
              - when: Calling clearApproval with approve balance
                then:
                  - it: Should unassign the current approver's approval
                  - it: Should decrease the proposal tally by the right amount
                  - it: Should emit an event
                  - it: usedVotingPower should return the right value
      - when: Calling hasSucceeded canExecute [created]
        then:
          - it: hasSucceeded should return false
          - it: canExecute should return false
      - when: Calling execute [created]
        then:
          - it: Should revert, even with the required permission

  - given: Proposal defeated
    and:
      - when: Calling the getters [defeated]
        then:
          - it: getProposal should return the right values
          - it: isProposalOpen should return false
          - it: canApprove should return false
          - it: hasSucceeded should return false
          - it: canExecute should return false
      - when: Calling approve or clearApproval [defeated]
        then:
          - it: Should revert for approve, despite having the permission
          - it: Should do nothing for clearApproval
      - when: Calling execute [defeated]
        then:
          - it: Should revert, with or without permission

  - given: Proposal passed
    and:
      - when: Calling the getters [passed]
        then:
          - it: getProposal should return the right values
          - it: isProposalOpen should return false
          - it: canApprove should return false
          - it: hasSucceeded should return true
          - it: canExecute should return true
      - when: Calling approve or clearApproval [passed]
        then:
          - it: Should revert, despite having the permission
      - given: No execute proposal permission
        and:
          - when: Calling execute [no perm]
            then:
              - it: Should revert
      - given: Execute proposal permission
        and:
          - when: Calling execute [passed]
            then:
              - it: Should execute the actions of the proposal on the target
              - it: Should call proposalEnded on the LockManager
              - it: Should emit an event

  - given: Proposal executed
    and:
      - when: Calling the getters [executed]
        then:
          - it: getProposal should return the right values
          - it: isProposalOpen should return false
          - it: canApprove should return false
          - it: hasSucceeded should return false
          - it: canExecute should return false
      - when: Calling approve or clearApproval [executed]
        then:
          - it: Should revert, despite having the permission
      - when: Calling execute [executed]
        then:
          - it: Should revert regardless of the permission

  # Getters
  - when: Calling isMember
    then:
      - it: Should return true when the sender has positive balance or locked tokens
      - it: Should return false otherwise
  - when: Calling customProposalParamsABI
    then:
      - it: Should return the right value

  # Settings
  - given: Update approval settings permission granted
    and:
      - when: Calling updatePluginSettings [granted]
        then:
          - it: Should set the new values
          - it: Settings() should return the right values
  - given: No update approval settings permission
    and:
      - when: Calling updatePluginSettings [not granted]
        then:
          - it: Should revert
