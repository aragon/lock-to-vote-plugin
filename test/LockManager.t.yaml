LockManagerTest:
  - given: Deploying the contract
    and:
      # Constructor with invalid params will revert at the EVM/preamble level

      - when: Constructor with valid params
        then:
          - it: Registers the DAO address
          - it: Stores the given settings
          - it: Stores the given token addresses

  - when: calling setPluginAddress
    and:
      - given: Invalid plugin
        and:
          - it: should revert
      - given: Invalid plugin interface
        and:
          - it: should revert
      - when: setPluginAddress the first time
        then:
          - it: should set the address
          - it: should revert if trying to update it later
      - when: setPluginAddress when already set
        then:
          - it: should revert

  # Locking and voting calls

  - given: No locked tokens
    and:
      - given: No token allowance [no locked]
        and:
          - when: Calling lock() 1
            then:
              - it: Should revert
          - when: Calling lockAndApprove() 1
            then:
              - it: Should revert
          - when: Calling approve() 1
            then:
              - it: Should revert
          - when: Calling lockAndVote() 1
            then:
              - it: Should revert
          - when: Calling vote() 1
            then:
              - it: Should revert
      - given: With token allowance [no locked]
        and:
          - when: Calling lock() 2
            then:
              - it: Should allow any token holder to lock
              - it: Should approve with the full token balance
              - it: Should emit an event
          - when: Calling lockAndApprove() 2
            then:
              - it: Should allow any token holder to lock
              - it: Should approve with the full token balance
              - it: The allocated token balance should have the full new balance
              - it: Should emit an event
          - when: Calling approve() 2
            then:
              - it: Should revert
          - when: Calling lockAndVote() 2
            then:
              - it: Should allow any token holder to lock
              - it: Should vote with the full token balance
              - it: The allocated token balance should have the full new balance
              - it: Should emit an event
          - when: Calling vote() 2
            then:
              - it: Should revert

  - given: Locked tokens
    and:
      - given: No token allowance [some locked]
        and:
          - when: Calling lock() 3
            then:
              - it: Should revert
          - when: Calling lockAndApprove() 3
            then:
              - it: Should revert
          - when: Calling approve() [same balance] 3
            then:
              - it: Should revert
          - when: Calling approve() [more locked balance] 3
            then:
              - it: Should approve with the full token balance
              - it: Should emit an event
          - when: Calling lockAndVote() 3
            then:
              - it: Should revert
          - when: Calling vote() [same balance] 3
            then:
              - it: Should revert
          - when: Calling vote() [more locked balance] 3
            then:
              - it: Should vote with the full token balance
              - it: Should emit an event
      - given: With token allowance [some locked]
        and:
          - when: Calling lock() 4
            then:
              - it: Should allow any token holder to lock
              - it: Should approve with the full token balance
              - it: Should increase the locked amount
              - it: Should emit an event
          - when: Calling lockAndApprove() [no prior power] 4
            then:
              - it: Should allow any token holder to lock
              - it: Should approve with the full token balance
              - it: Should increase the locked amount
              - it: The allocated token balance should have the full new balance
              - it: Should emit an event
          - when: Calling lockAndApprove() [with prior power] 4
            then:
              - it: Should allow any token holder to lock
              - it: Should approve with the full token balance
              - it: Should increase the locked amount
              - it: The allocated token balance should have the full new balance
              - it: Should emit an event
          - when: Calling approve() [same balance] 4
            then:
              - it: Should revert
          - when: Calling approve() [more locked balance] 4
            then:
              - it: Should approve with the full token balance
              - it: Should emit an event
          - when: Calling lockAndVote() [no prior power] 4
            then:
              - it: Should allow any token holder to lock
              - it: Should vote with the full token balance
              - it: Should increase the locked amount
              - it: The allocated token balance should have the full new balance
              - it: Should emit an event
          - when: Calling lockAndVote() [with prior power] 4
            then:
              - it: Should allow any token holder to lock
              - it: Should vote with the full token balance
              - it: Should increase the locked amount
              - it: The allocated token balance should have the full new balance
              - it: Should emit an event
          - when: Calling vote() [same balance] 4
            then:
              - it: Should revert
          - when: Calling vote() [more locked balance] 4
            then:
              - it: Should vote with the full token balance
              - it: Should emit an event

  # Invalid config's

  - given: Calling lock(), lockAndApprove() or lockAndVote()
    then:
      - given: Empty plugin
        and:
          - it: Locking and voting should revert
      - given: Invalid token
        and:
          - it: Locking should revert
          - it: Locking and voting should revert
          - it: Voting should revert

  - given: ProposalCreated is called
    and:
      - when: The caller is not the plugin [proposalCreated]
        then:
          - it: Should revert
      - when: The caller is the plugin [proposalCreated]
        then:
          - it: Adds the proposal ID to the list of known proposals

  - given: ProposalEnded is called
    and:
      - when: The caller is not the plugin [ProposalEnded]
        then:
          - it: Should revert
      - when: The caller is the plugin [ProposalEnded]
        then:
          - it: Removes the proposal ID from the list of known proposals

  # Calling unlock
  - given: Strict mode is set
    and:
      - given: Didn't lock anything [strict]
        and:
          - when: Trying to unlock [1 strict]
            then:
              - it: Should revert
      - given: Locked but didn't approve anywhere [strict]
        then:
          - when: Trying to unlock [2 approval strict]
            then:
              - it: Should unlock and refund the full amount right away
              - it: Should emit an event
      - given: Locked but didn't vote anywhere [strict]
        then:
          - when: Trying to unlock [2 voting strict]
            then:
              - it: Should unlock and refund the full amount right away
              - it: Should emit an event
      - given: Locked but approved ended or executed proposals [strict]
        then:
          - when: Trying to unlock [3 approved strict]
            then:
              - it: Should unlock and refund the full amount right away
              - it: Should emit an event
      - given: Locked but voted on ended or executed proposals [strict]
        then:
          - when: Trying to unlock [3 voted strict]
            then:
              - it: Should unlock and refund the full amount right away
              - it: Should emit an event
      - given: Locked and approved currently active proposals [strict]
        then:
          - when: Trying to unlock [4 voted strict]
            then:
              - it: Should revert
      - given: Locked and voted on currently active proposals [strict]
        then:
          - when: Trying to unlock [4 voted strict]
            then:
              - it: Should revert

  - given: Flexible mode is set
    and:
      - given: Didn't lock anything [flexible]
        and:
          - when: Trying to unlock [1 flexible]
            then:
              - it: Should revert
      - given: Locked but didn't approve anywhere [flexible]
        then:
          - when: Trying to unlock [2 approval flexible]
            then:
              - it: Should unlock and refund the full amount right away
              - it: Should emit an event
      - given: Locked but didn't vote anywhere [flexible]
        then:
          - when: Trying to unlock [2 voting flexible]
            then:
              - it: Should unlock and refund the full amount right away
              - it: Should emit an event
      - given: Locked but approved on ended or executed proposals [flexible]
        then:
          - when: Trying to unlock [3 approved flexible]
            then:
              - it: Should unlock and refund the full amount right away
              - it: Should emit an event
      - given: Locked but voted on ended or executed proposals [flexible]
        then:
          - when: Trying to unlock [3 flexible]
            then:
              - it: Should unlock and refund the full amount right away
              - it: Should emit an event
      - given: Locked and approved currently active proposals [flexible]
        then:
          - when: Trying to unlock [4 approved flexible]
            then:
              - it: Should deallocate the existing voting power from active proposals
              - it: Should unlock and refund the full amount
              - it: Should emit an event
      - given: Locked and voted on currently active proposals [flexible]
        then:
          - when: Trying to unlock [4 voted flexible]
            then:
              - it: Should deallocate the existing voting power from active proposals
              - it: Should unlock and refund the full amount
              - it: Should emit an event

  - when: Calling plugin()
    then:
      - it: Should return the right address

  - when: Calling token()
    then:
      - it: Should return the right address

  - given: No underlying token
    then:
      - when: Calling underlyingToken() empty
        then:
          - it: Should return the token address

  - given: Underlying token defined
    then:
      - when: Calling underlyingToken() set
        then:
          - it: Should return the right address
